{"version":3,"sources":["webpack:///./reprojection-by-code.js"],"names":["graticule","strokeStyle","color","width","lineDash","showLabels","visible","wrapX","map","layers","source","target","view","projection","center","zoom","queryInput","document","getElementById","searchButton","resultSpan","renderEdgesCheckbox","showGraticuleCheckbox","setProjection","code","name","proj4def","bbox","innerHTML","setView","const","newProjCode","defs","newProj","fromLonLat","worldExtent","setWorldExtent","extent","undefined","setExtent","newView","fit","onclick","event","query","value","fetch","then","response","json","results","length","let","i","ii","result","preventDefault","onchange","getLayers","forEach","layer","getSource","setRenderReprojectionEdges","checked","setVisible"],"mappings":"4FAAA,+FAYMA,EAAY,IAAI,IAAU,CAE9BC,YAAa,IAAI,IAAO,CACtBC,MAAO,sBACPC,MAAO,EACPC,SAAU,CAAC,GAAK,KAElBC,YAAY,EACZC,SAAS,EACTC,OAAO,IAGHC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,MAEdV,GAEFW,OAAQ,MACRC,KAAM,IAAI,IAAK,CACbC,WAAY,YACZC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIJC,EAAaC,SAASC,eAAe,cACrCC,EAAeF,SAASC,eAAe,eACvCE,EAAaH,SAASC,eAAe,eACrCG,EAAsBJ,SAASC,eAAe,gBAC9CI,EAAwBL,SAASC,eAAe,kBAEtD,SAASK,EAAcC,EAAMC,EAAMC,EAAUC,GAC3C,GAAa,OAATH,GAA0B,OAATC,GAA8B,OAAbC,GAA8B,OAATC,EASzD,OARAP,EAAWQ,UAAY,gDACvBpB,EAAIqB,QACF,IAAI,IAAK,CACPhB,WAAY,YACZC,OAAQ,CAAC,EAAG,GACZC,KAAM,KAMZK,EAAWQ,UAAY,IAAMJ,EAAO,KAAOC,EAE3CK,IAAMC,EAAc,QAAUP,EAC9B,IAAMQ,KAAKD,EAAaL,GACxB,YAAS,KACTI,IAAMG,EAAU,YAAcF,GACxBG,EAAa,YAAa,YAAaD,GAEzCE,EAAc,CAACR,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IACnDM,EAAQG,eAAeD,GAInBR,EAAK,GAAKA,EAAK,KACjBQ,EAAc,CAACR,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAK,IAAKA,EAAK,KAEvDG,IAAMO,EAAS,YAAeF,EAAaD,OAAYI,EAAW,GAClEL,EAAQM,UAAUF,GAClBP,IAAMU,EAAU,IAAI,IAAK,CACvB3B,WAAYoB,IAEdzB,EAAIqB,QAAQW,GACZA,EAAQC,IAAIJ,GAyCdlB,EAAauB,QAAU,SAAUC,GAtCjC,IAAgBC,IAuCP5B,EAAW6B,MAtClBzB,EAAWQ,UAAY,gBACvBkB,MAAM,kCAAoCF,GACvCG,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAAUE,GACdnB,IAAMoB,EAAUD,EAAc,QAC9B,GAAIC,GAAWA,EAAQC,OAAS,EAC9B,IAAKC,IAAIC,EAAI,EAAGC,EAAKJ,EAAQC,OAAQE,EAAIC,EAAID,IAAK,CAChDvB,IAAMyB,EAASL,EAAQG,GACvB,GAAIE,EAAQ,CACVzB,IAAMN,EAAO+B,EAAa,KACpB9B,EAAO8B,EAAa,KACpB7B,EAAW6B,EAAc,MACzB5B,EAAO4B,EAAa,KAC1B,GACE/B,GACAA,EAAK2B,OAAS,GACdzB,GACAA,EAASyB,OAAS,GAClBxB,GACe,GAAfA,EAAKwB,OAGL,YADA5B,EAAcC,EAAMC,EAAMC,EAAUC,IAM5CJ,EAAc,KAAM,KAAM,KAAM,SAUpCoB,EAAMa,kBAMRnC,EAAoBoC,SAAW,WAC7BjD,EAAIkD,YAAYC,SAAQ,SAAUC,GAChC,GAAIA,aAAiB,IAAW,CAC9B9B,IAAMpB,EAASkD,EAAMC,YACjBnD,aAAkB,KACpBA,EAAOoD,2BAA2BzC,EAAoB0C,cAS9DzC,EAAsBmC,SAAW,WAC/BzD,EAAUgE,WAAW1C,EAAsByC,Y","file":"reprojection-by-code.js","sourcesContent":["import Graticule from '../src/ol/layer/Graticule.js';\nimport Map from '../src/ol/Map.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport Stroke from '../src/ol/style/Stroke.js';\nimport TileImage from '../src/ol/source/TileImage.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport View from '../src/ol/View.js';\nimport proj4 from 'proj4';\nimport {applyTransform} from '../src/ol/extent.js';\nimport {get as getProjection, getTransform} from '../src/ol/proj.js';\nimport {register} from '../src/ol/proj/proj4.js';\n\nconst graticule = new Graticule({\n  // the style to use for the lines, optional.\n  strokeStyle: new Stroke({\n    color: 'rgba(255,120,0,0.9)',\n    width: 2,\n    lineDash: [0.5, 4],\n  }),\n  showLabels: true,\n  visible: false,\n  wrapX: false,\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n    graticule,\n  ],\n  target: 'map',\n  view: new View({\n    projection: 'EPSG:3857',\n    center: [0, 0],\n    zoom: 1,\n  }),\n});\n\nconst queryInput = document.getElementById('epsg-query');\nconst searchButton = document.getElementById('epsg-search');\nconst resultSpan = document.getElementById('epsg-result');\nconst renderEdgesCheckbox = document.getElementById('render-edges');\nconst showGraticuleCheckbox = document.getElementById('show-graticule');\n\nfunction setProjection(code, name, proj4def, bbox) {\n  if (code === null || name === null || proj4def === null || bbox === null) {\n    resultSpan.innerHTML = 'Nothing usable found, using EPSG:3857...';\n    map.setView(\n      new View({\n        projection: 'EPSG:3857',\n        center: [0, 0],\n        zoom: 1,\n      })\n    );\n    return;\n  }\n\n  resultSpan.innerHTML = '(' + code + ') ' + name;\n\n  const newProjCode = 'EPSG:' + code;\n  proj4.defs(newProjCode, proj4def);\n  register(proj4);\n  const newProj = getProjection(newProjCode);\n  const fromLonLat = getTransform('EPSG:4326', newProj);\n\n  let worldExtent = [bbox[1], bbox[2], bbox[3], bbox[0]];\n  newProj.setWorldExtent(worldExtent);\n\n  // approximate calculation of projection extent,\n  // checking if the world extent crosses the dateline\n  if (bbox[1] > bbox[3]) {\n    worldExtent = [bbox[1], bbox[2], bbox[3] + 360, bbox[0]];\n  }\n  const extent = applyTransform(worldExtent, fromLonLat, undefined, 8);\n  newProj.setExtent(extent);\n  const newView = new View({\n    projection: newProj,\n  });\n  map.setView(newView);\n  newView.fit(extent);\n}\n\nfunction search(query) {\n  resultSpan.innerHTML = 'Searching ...';\n  fetch('https://epsg.io/?format=json&q=' + query)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      const results = json['results'];\n      if (results && results.length > 0) {\n        for (let i = 0, ii = results.length; i < ii; i++) {\n          const result = results[i];\n          if (result) {\n            const code = result['code'];\n            const name = result['name'];\n            const proj4def = result['proj4'];\n            const bbox = result['bbox'];\n            if (\n              code &&\n              code.length > 0 &&\n              proj4def &&\n              proj4def.length > 0 &&\n              bbox &&\n              bbox.length == 4\n            ) {\n              setProjection(code, name, proj4def, bbox);\n              return;\n            }\n          }\n        }\n      }\n      setProjection(null, null, null, null);\n    });\n}\n\n/**\n * Handle click event.\n * @param {Event} event The event.\n */\nsearchButton.onclick = function (event) {\n  search(queryInput.value);\n  event.preventDefault();\n};\n\n/**\n * Handle checkbox change event.\n */\nrenderEdgesCheckbox.onchange = function () {\n  map.getLayers().forEach(function (layer) {\n    if (layer instanceof TileLayer) {\n      const source = layer.getSource();\n      if (source instanceof TileImage) {\n        source.setRenderReprojectionEdges(renderEdgesCheckbox.checked);\n      }\n    }\n  });\n};\n\n/**\n * Handle checkbox change event.\n */\nshowGraticuleCheckbox.onchange = function () {\n  graticule.setVisible(showGraticuleCheckbox.checked);\n};\n"],"sourceRoot":""}