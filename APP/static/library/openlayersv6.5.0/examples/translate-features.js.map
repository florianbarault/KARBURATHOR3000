{"version":3,"sources":["webpack:///../src/ol/interaction/Translate.js","webpack:///./translate-features.js"],"names":["TranslateEventType","TranslateEvent","type","features","coordinate","startCoordinate","mapBrowserEvent","super","this","Translate","opt_options","const","layerFilter","options","lastCoordinate_","startCoordinate_","features_","undefined","layers","layer","layerFilter_","filter_","filter","hitTolerance_","hitTolerance","lastFeature_","addEventListener","ACTIVE","handleActiveChanged_","handleDownEvent","event","featuresAtPixel_","pixel","map","handleMoveEvent","dispatchEvent","handleUpEvent","handleDragEvent","newCoordinate","deltaX","deltaY","forEach","feature","geom","getGeometry","translate","setGeometry","elem","getViewport","classList","remove","add","forEachFeatureAtPixel","getArray","bind","getHitTolerance","setHitTolerance","setMap","oldMap","getMap","updateState_","let","active","getActive","raster","source","vector","url","format","select","getFeatures","interactions","extend","target","view","center","zoom"],"mappings":"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","file":"translate-features.js","sourcesContent":["/**\n * @module ol/interaction/Translate\n */\nimport Collection from '../Collection.js';\nimport Event from '../events/Event.js';\nimport InteractionProperty from './Property.js';\nimport PointerInteraction from './Pointer.js';\nimport {TRUE} from '../functions.js';\nimport {getChangeEventType} from '../Object.js';\nimport {includes} from '../array.js';\n\n/**\n * @enum {string}\n */\nconst TranslateEventType = {\n  /**\n   * Triggered upon feature translation start.\n   * @event TranslateEvent#translatestart\n   * @api\n   */\n  TRANSLATESTART: 'translatestart',\n  /**\n   * Triggered upon feature translation.\n   * @event TranslateEvent#translating\n   * @api\n   */\n  TRANSLATING: 'translating',\n  /**\n   * Triggered upon feature translation end.\n   * @event TranslateEvent#translateend\n   * @api\n   */\n  TRANSLATEEND: 'translateend',\n};\n\n/**\n * A function that takes an {@link module:ol/Feature} or\n * {@link module:ol/render/Feature} and an\n * {@link module:ol/layer/Layer} and returns `true` if the feature may be\n * translated or `false` otherwise.\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default):boolean} FilterFunction\n */\n\n/**\n * @typedef {Object} Options\n * @property {Collection<import(\"../Feature.js\").default>} [features] Only features contained in this collection will be able to be translated. If\n * not specified, all features on the map will be able to be translated.\n * @property {Array<import(\"../layer/Layer.js\").default>|function(import(\"../layer/Layer.js\").default): boolean} [layers] A list of layers from which features should be\n * translated. Alternatively, a filter function can be provided. The\n * function will be called for each layer in the map and should return\n * `true` for layers that you want to be translatable. If the option is\n * absent, all visible layers will be considered translatable.\n * @property {FilterFunction} [filter] A function\n * that takes an {@link module:ol/Feature} and an\n * {@link module:ol/layer/Layer} and returns `true` if the feature may be\n * translated or `false` otherwise.\n * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside the radius around the given position\n * will be checked for features.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Translate~Translate} instances\n * are instances of this type.\n */\nexport class TranslateEvent extends Event {\n  /**\n   * @param {TranslateEventType} type Type.\n   * @param {Collection<import(\"../Feature.js\").default>} features The features translated.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate The event coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} startCoordinate The original coordinates before.translation started\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   */\n  constructor(type, features, coordinate, startCoordinate, mapBrowserEvent) {\n    super(type);\n\n    /**\n     * The features being translated.\n     * @type {Collection<import(\"../Feature.js\").default>}\n     * @api\n     */\n    this.features = features;\n\n    /**\n     * The coordinate of the drag event.\n     * @const\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @api\n     */\n    this.coordinate = coordinate;\n\n    /**\n     * The coordinate of the start position before translation started.\n     * @const\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @api\n     */\n    this.startCoordinate = startCoordinate;\n\n    /**\n     * Associated {@link module:ol/MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    this.mapBrowserEvent = mapBrowserEvent;\n  }\n}\n\n/**\n * @classdesc\n * Interaction for translating (moving) features.\n *\n * @fires TranslateEvent\n * @api\n */\nclass Translate extends PointerInteraction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super(/** @type {import(\"./Pointer.js\").Options} */ (options));\n\n    /**\n     * The last position we translated to.\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.lastCoordinate_ = null;\n\n    /**\n     * The start position before translation started.\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.startCoordinate_ = null;\n\n    /**\n     * @type {Collection<import(\"../Feature.js\").default>}\n     * @private\n     */\n    this.features_ = options.features !== undefined ? options.features : null;\n\n    /** @type {function(import(\"../layer/Layer.js\").default): boolean} */\n    let layerFilter;\n    if (options.layers) {\n      if (typeof options.layers === 'function') {\n        layerFilter = options.layers;\n      } else {\n        const layers = options.layers;\n        layerFilter = function (layer) {\n          return includes(layers, layer);\n        };\n      }\n    } else {\n      layerFilter = TRUE;\n    }\n\n    /**\n     * @private\n     * @type {function(import(\"../layer/Layer.js\").default): boolean}\n     */\n    this.layerFilter_ = layerFilter;\n\n    /**\n     * @private\n     * @type {FilterFunction}\n     */\n    this.filter_ = options.filter ? options.filter : TRUE;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;\n\n    /**\n     * @type {import(\"../Feature.js\").default}\n     * @private\n     */\n    this.lastFeature_ = null;\n\n    this.addEventListener(\n      getChangeEventType(InteractionProperty.ACTIVE),\n      this.handleActiveChanged_\n    );\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(event) {\n    this.lastFeature_ = this.featuresAtPixel_(event.pixel, event.map);\n    if (!this.lastCoordinate_ && this.lastFeature_) {\n      this.startCoordinate_ = event.coordinate;\n      this.lastCoordinate_ = event.coordinate;\n      this.handleMoveEvent(event);\n\n      const features = this.features_ || new Collection([this.lastFeature_]);\n\n      this.dispatchEvent(\n        new TranslateEvent(\n          TranslateEventType.TRANSLATESTART,\n          features,\n          event.coordinate,\n          this.startCoordinate_,\n          event\n        )\n      );\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(event) {\n    if (this.lastCoordinate_) {\n      this.lastCoordinate_ = null;\n      this.handleMoveEvent(event);\n\n      const features = this.features_ || new Collection([this.lastFeature_]);\n\n      this.dispatchEvent(\n        new TranslateEvent(\n          TranslateEventType.TRANSLATEEND,\n          features,\n          event.coordinate,\n          this.startCoordinate_,\n          event\n        )\n      );\n      // cleanup\n      this.startCoordinate_ = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   */\n  handleDragEvent(event) {\n    if (this.lastCoordinate_) {\n      const newCoordinate = event.coordinate;\n      const deltaX = newCoordinate[0] - this.lastCoordinate_[0];\n      const deltaY = newCoordinate[1] - this.lastCoordinate_[1];\n\n      const features = this.features_ || new Collection([this.lastFeature_]);\n\n      features.forEach(function (feature) {\n        const geom = feature.getGeometry();\n        geom.translate(deltaX, deltaY);\n        feature.setGeometry(geom);\n      });\n\n      this.lastCoordinate_ = newCoordinate;\n\n      this.dispatchEvent(\n        new TranslateEvent(\n          TranslateEventType.TRANSLATING,\n          features,\n          newCoordinate,\n          this.startCoordinate_,\n          event\n        )\n      );\n    }\n  }\n\n  /**\n   * Handle pointer move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   */\n  handleMoveEvent(event) {\n    const elem = event.map.getViewport();\n\n    // Change the cursor to grab/grabbing if hovering any of the features managed\n    // by the interaction\n    if (this.featuresAtPixel_(event.pixel, event.map)) {\n      elem.classList.remove(this.lastCoordinate_ ? 'ol-grab' : 'ol-grabbing');\n      elem.classList.add(this.lastCoordinate_ ? 'ol-grabbing' : 'ol-grab');\n    } else {\n      elem.classList.remove('ol-grab', 'ol-grabbing');\n    }\n  }\n\n  /**\n   * Tests to see if the given coordinates intersects any of our selected\n   * features.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel coordinate to test for intersection.\n   * @param {import(\"../PluggableMap.js\").default} map Map to test the intersection on.\n   * @return {import(\"../Feature.js\").default} Returns the feature found at the specified pixel\n   * coordinates.\n   * @private\n   */\n  featuresAtPixel_(pixel, map) {\n    return map.forEachFeatureAtPixel(\n      pixel,\n      function (feature, layer) {\n        if (this.filter_(feature, layer)) {\n          if (!this.features_ || includes(this.features_.getArray(), feature)) {\n            return feature;\n          }\n        }\n      }.bind(this),\n      {\n        layerFilter: this.layerFilter_,\n        hitTolerance: this.hitTolerance_,\n      }\n    );\n  }\n\n  /**\n   * Returns the Hit-detection tolerance.\n   * @returns {number} Hit tolerance in pixels.\n   * @api\n   */\n  getHitTolerance() {\n    return this.hitTolerance_;\n  }\n\n  /**\n   * Hit-detection tolerance. Pixels inside the radius around the given position\n   * will be checked for features.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @api\n   */\n  setHitTolerance(hitTolerance) {\n    this.hitTolerance_ = hitTolerance;\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  setMap(map) {\n    const oldMap = this.getMap();\n    super.setMap(map);\n    this.updateState_(oldMap);\n  }\n\n  /**\n   * @private\n   */\n  handleActiveChanged_() {\n    this.updateState_(null);\n  }\n\n  /**\n   * @param {import(\"../PluggableMap.js\").default} oldMap Old map.\n   * @private\n   */\n  updateState_(oldMap) {\n    let map = this.getMap();\n    const active = this.getActive();\n    if (!map || !active) {\n      map = map || oldMap;\n      if (map) {\n        const elem = map.getViewport();\n        elem.classList.remove('ol-grab', 'ol-grabbing');\n      }\n    }\n  }\n}\n\nexport default Translate;\n","import GeoJSON from '../src/ol/format/GeoJSON.js';\nimport Map from '../src/ol/Map.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport {\n  Select,\n  Translate,\n  defaults as defaultInteractions,\n} from '../src/ol/interaction.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\n\nconst raster = new TileLayer({\n  source: new OSM(),\n});\n\nconst vector = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/countries.geojson',\n    format: new GeoJSON(),\n  }),\n});\n\nconst select = new Select();\n\nconst translate = new Translate({\n  features: select.getFeatures(),\n});\n\nconst map = new Map({\n  interactions: defaultInteractions().extend([select, translate]),\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n"],"sourceRoot":""}