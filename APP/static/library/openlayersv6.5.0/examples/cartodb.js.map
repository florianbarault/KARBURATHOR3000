{"version":3,"sources":["webpack:///../src/ol/source/CartoDB.js","webpack:///./cartodb.js"],"names":["options","super","attributions","cacheSize","crossOrigin","maxZoom","undefined","minZoom","projection","transition","wrapX","this","account_","account","mapId_","map","config_","config","templateCache_","initializeMap_","getConfig","updateConfig","setConfig","const","paramHash","JSON","stringify","applyTemplate_","let","mapUrl","client","XMLHttpRequest","addEventListener","handleInitResponse_","bind","handleInitError_","open","setRequestHeader","send","event","status","response","parse","responseText","err","setState","ERROR","READY","data","tilesUrl","cdn_url","https","layergroupid","setUrl","mapConfig","cartoDBSource","Map","layers","Tile","source","OSM","target","view","View","center","zoom","document","getElementById","n","value","sql"],"mappings":"mJAwMe,EA5JU,YAIvB,WAAYA,GACVC,OAAM,MACJC,aAAcF,EAAQE,aACtBC,UAAWH,EAAQG,UACnBC,YAAaJ,EAAQI,YACrBC,aAA6BC,IAApBN,EAAQK,QAAwBL,EAAQK,QAAU,GAC3DE,QAASP,EAAQO,QACjBC,WAAYR,EAAQQ,WACpBC,WAAYT,EAAQS,WACpBC,MAAOV,EAAQU,QAOjBC,KAAKC,SAAWZ,EAAQa,QAMxBF,KAAKG,OAASd,EAAQe,KAAO,GAM7BJ,KAAKK,QAAUhB,EAAQiB,QAAU,GAMjCN,KAAKO,eAAiB,GAEtBP,KAAKQ,iB,8FAQP,EAAF,UAAEC,UAAA,WACE,OAAOT,KAAKK,SASd,EAAF,UAAEK,aAAA,SAAaJ,GACX,YAAON,KAAKK,QAASC,GACrBN,KAAKQ,kBAUP,EAAF,UAAEG,UAAA,SAAUL,GACRN,KAAKK,QAAUC,GAAU,GACzBN,KAAKQ,kBAOP,EAAF,UAAEA,eAAA,WACEI,IAAMC,EAAYC,KAAKC,UAAUf,KAAKK,SACtC,GAAIL,KAAKO,eAAeM,GACtBb,KAAKgB,eAAehB,KAAKO,eAAeM,QAD1C,CAIAI,IAAIC,EAAS,WAAalB,KAAKC,SAAW,wBAEtCD,KAAKG,SACPe,GAAU,UAAYlB,KAAKG,QAG7BS,IAAMO,EAAS,IAAIC,eACnBD,EAAOE,iBACL,OACArB,KAAKsB,oBAAoBC,KAAKvB,KAAMa,IAEtCM,EAAOE,iBAAiB,QAASrB,KAAKwB,iBAAiBD,KAAKvB,OAC5DmB,EAAOM,KAAK,OAAQP,GACpBC,EAAOO,iBAAiB,eAAgB,oBACxCP,EAAOQ,KAAKb,KAAKC,UAAUf,KAAKK,YAUlC,EAAF,UAAEiB,oBAAA,SAAoBT,EAAWe,GAC7BhB,IAAMO,EAAwCS,EAAY,OAE1D,IAAKT,EAAOU,QAAWV,EAAOU,QAAU,KAAOV,EAAOU,OAAS,IAAM,CACnEZ,IAAIa,EACJ,IACEA,EAA4ChB,KAAKiB,MAC/CZ,EAAOa,cAET,MAAOC,GAEP,YADAjC,KAAKkC,SAAS,IAAYC,OAG5BnC,KAAKgB,eAAec,GACpB9B,KAAKO,eAAeM,GAAaiB,EACjC9B,KAAKkC,SAAS,IAAYE,YAE1BpC,KAAKkC,SAAS,IAAYC,QAQ9B,EAAF,UAAEX,iBAAA,SAAiBI,GACf5B,KAAKkC,SAAS,IAAYC,QAQ5B,EAAF,UAAEnB,eAAA,SAAeqB,GACbzB,IAAM0B,EACJ,WACAD,EAAKE,QAAQC,MACb,IACAxC,KAAKC,SACL,eACAoC,EAAKI,aACL,mBACFzC,KAAK0C,OAAOJ,I,EAxJS,CAAH,K,OCvChBK,EAAY,CAChB,OAAU,CACR,CACE,KAAQ,UACR,QAAW,CACT,iBAAoB,QACpB,SAAY,iCACZ,IAAO,wDAMTC,EAAgB,IAAI,EAAQ,CAChC1C,QAAS,gBACTI,OAAQqC,IAGE,IAAIE,EAAA,EAAI,CAClBC,OAAQ,CACN,IAAIC,EAAA,EAAU,CACZC,OAAQ,IAAIC,EAAA,IAEd,IAAIF,EAAA,EAAU,CACZC,OAAQJ,KAGZM,OAAQ,MACRC,KAAM,IAAIC,EAAA,EAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAUVC,SAASC,eAAe,gBAAgBnC,iBAAiB,UAAU,WANnE,IAAiBoC,IAOPzD,KAAK0D,MANbf,EAAUG,OAAO,GAAGzD,QAAQsE,IAC1B,mDAAqDF,EACvDb,EAAcjC,UAAUgC,Q","file":"cartodb.js","sourcesContent":["/**\n * @module ol/source/CartoDB\n */\n\nimport SourceState from './State.js';\nimport XYZ from './XYZ.js';\nimport {assign} from '../obj.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\n * @property {number} [maxZoom=18] Max zoom.\n * @property {number} [minZoom] Minimum zoom.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {Object} [config] If using anonymous maps, the CartoDB config to use. See\n * http://docs.cartodb.com/cartodb-platform/maps-api/anonymous-maps/\n * for more detail.\n * If using named maps, a key-value lookup with the template parameters.\n * See http://docs.cartodb.com/cartodb-platform/maps-api/named-maps/\n * for more detail.\n * @property {string} [map] If using named maps, this will be the name of the template to load.\n * See http://docs.cartodb.com/cartodb-platform/maps-api/named-maps/\n * for more detail.\n * @property {string} account If using named maps, this will be the name of the template to load.\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n/**\n * @typedef {Object} CartoDBLayerInfo\n * @property {string} layergroupid The layer group ID\n * @property {{https: string}} cdn_url The CDN URL\n */\n\n/**\n * @classdesc\n * Layer source for the CartoDB Maps API.\n * @api\n */\nclass CartoDB extends XYZ {\n  /**\n   * @param {Options} options CartoDB options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 18,\n      minZoom: options.minZoom,\n      projection: options.projection,\n      transition: options.transition,\n      wrapX: options.wrapX,\n    });\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.account_ = options.account;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.mapId_ = options.map || '';\n\n    /**\n     * @type {!Object}\n     * @private\n     */\n    this.config_ = options.config || {};\n\n    /**\n     * @type {!Object<string, CartoDBLayerInfo>}\n     * @private\n     */\n    this.templateCache_ = {};\n\n    this.initializeMap_();\n  }\n\n  /**\n   * Returns the current config.\n   * @return {!Object} The current configuration.\n   * @api\n   */\n  getConfig() {\n    return this.config_;\n  }\n\n  /**\n   * Updates the carto db config.\n   * @param {Object} config a key-value lookup. Values will replace current values\n   *     in the config.\n   * @api\n   */\n  updateConfig(config) {\n    assign(this.config_, config);\n    this.initializeMap_();\n  }\n\n  /**\n   * Sets the CartoDB config\n   * @param {Object} config In the case of anonymous maps, a CartoDB configuration\n   *     object.\n   * If using named maps, a key-value lookup with the template parameters.\n   * @api\n   */\n  setConfig(config) {\n    this.config_ = config || {};\n    this.initializeMap_();\n  }\n\n  /**\n   * Issue a request to initialize the CartoDB map.\n   * @private\n   */\n  initializeMap_() {\n    const paramHash = JSON.stringify(this.config_);\n    if (this.templateCache_[paramHash]) {\n      this.applyTemplate_(this.templateCache_[paramHash]);\n      return;\n    }\n    let mapUrl = 'https://' + this.account_ + '.carto.com/api/v1/map';\n\n    if (this.mapId_) {\n      mapUrl += '/named/' + this.mapId_;\n    }\n\n    const client = new XMLHttpRequest();\n    client.addEventListener(\n      'load',\n      this.handleInitResponse_.bind(this, paramHash)\n    );\n    client.addEventListener('error', this.handleInitError_.bind(this));\n    client.open('POST', mapUrl);\n    client.setRequestHeader('Content-type', 'application/json');\n    client.send(JSON.stringify(this.config_));\n  }\n\n  /**\n   * Handle map initialization response.\n   * @param {string} paramHash a hash representing the parameter set that was used\n   *     for the request\n   * @param {Event} event Event.\n   * @private\n   */\n  handleInitResponse_(paramHash, event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {CartoDBLayerInfo} */ (JSON.parse(\n          client.responseText\n        ));\n      } catch (err) {\n        this.setState(SourceState.ERROR);\n        return;\n      }\n      this.applyTemplate_(response);\n      this.templateCache_[paramHash] = response;\n      this.setState(SourceState.READY);\n    } else {\n      this.setState(SourceState.ERROR);\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event Event.\n   */\n  handleInitError_(event) {\n    this.setState(SourceState.ERROR);\n  }\n\n  /**\n   * Apply the new tile urls returned by carto db\n   * @param {CartoDBLayerInfo} data Result of carto db call.\n   * @private\n   */\n  applyTemplate_(data) {\n    const tilesUrl =\n      'https://' +\n      data.cdn_url.https +\n      '/' +\n      this.account_ +\n      '/api/v1/map/' +\n      data.layergroupid +\n      '/{z}/{x}/{y}.png';\n    this.setUrl(tilesUrl);\n  }\n}\n\nexport default CartoDB;\n","import Map from '../src/ol/Map.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport View from '../src/ol/View.js';\nimport {CartoDB, OSM} from '../src/ol/source.js';\n\nconst mapConfig = {\n  'layers': [\n    {\n      'type': 'cartodb',\n      'options': {\n        'cartocss_version': '2.1.1',\n        'cartocss': '#layer { polygon-fill: #F00; }',\n        'sql': 'select * from european_countries_e where area > 0',\n      },\n    },\n  ],\n};\n\nconst cartoDBSource = new CartoDB({\n  account: 'documentation',\n  config: mapConfig,\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n    new TileLayer({\n      source: cartoDBSource,\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\nfunction setArea(n) {\n  mapConfig.layers[0].options.sql =\n    'select * from european_countries_e where area > ' + n;\n  cartoDBSource.setConfig(mapConfig);\n}\n\ndocument.getElementById('country-area').addEventListener('change', function () {\n  setArea(this.value);\n});\n"],"sourceRoot":""}