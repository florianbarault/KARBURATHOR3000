{"version":3,"sources":["webpack:///../src/ol/source/ImageMapGuide.js","webpack:///./mapguide-untiled.js"],"names":["options","super","imageSmoothing","projection","resolutions","this","crossOrigin_","undefined","crossOrigin","displayDpi_","displayDpi","params_","params","url_","url","imageLoadFunction_","imageLoadFunction","hidpi_","hidpi","metersPerUnit_","metersPerUnit","ratio_","ratio","useOverlay_","useOverlay","image_","renderedRevision_","getParams","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","let","image","getRevision","getResolution","getPixelRatio","getExtent","slice","const","size","imageUrl","getUrl","addEventListener","EventType","CHANGE","handleImageChange","bind","getImageLoadFunction","updateParams","changed","baseUrl","scale","dpi","mcsW","mcsH","devW","devH","mpp","getScale","center","baseParams","Math","round","setImageLoadFunction","Map","layers","Image","source","MAPDEFINITION","FORMAT","VERSION","USERNAME","PASSWORD","target","view","View","zoom"],"mappings":"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","file":"mapguide-untiled.js","sourcesContent":["/**\n * @module ol/source/ImageMapGuide\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport {appendParams} from '../uri.js';\nimport {assign} from '../obj.js';\nimport {\n  containsExtent,\n  getCenter,\n  getHeight,\n  getWidth,\n  scaleFromCenter,\n} from '../extent.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {Object} [params] Additional parameters.\n */\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageMapGuide extends ImageSource {\n  /**\n   * @param {Options} options ImageMapGuide options.\n   */\n  constructor(options) {\n    super({\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.displayDpi_ =\n      options.displayDpi !== undefined ? options.displayDpi : 96;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.metersPerUnit_ =\n      options.metersPerUnit !== undefined ? options.metersPerUnit : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.useOverlay_ =\n      options.useOverlay !== undefined ? options.useOverlay : false;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n\n    let image = this.image_;\n    if (\n      image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), extent)\n    ) {\n      return image;\n    }\n\n    if (this.ratio_ != 1) {\n      extent = extent.slice();\n      scaleFromCenter(extent, this.ratio_);\n    }\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n\n    if (this.url_ !== undefined) {\n      const imageUrl = this.getUrl(\n        this.url_,\n        this.params_,\n        extent,\n        size,\n        projection\n      );\n      image = new ImageWrapper(\n        extent,\n        resolution,\n        pixelRatio,\n        imageUrl,\n        this.crossOrigin_,\n        this.imageLoadFunction_\n      );\n      image.addEventListener(\n        EventType.CHANGE,\n        this.handleImageChange.bind(this)\n      );\n    } else {\n      image = null;\n    }\n    this.image_ = image;\n    this.renderedRevision_ = this.getRevision();\n\n    return image;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    assign(this.params_, params);\n    this.changed();\n  }\n\n  /**\n   * @param {string} baseUrl The mapagent url.\n   * @param {Object<string, string|number>} params Request parameters.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string} The mapagent map image request URL.\n   */\n  getUrl(baseUrl, params, extent, size, projection) {\n    const scale = getScale(extent, size, this.metersPerUnit_, this.displayDpi_);\n    const center = getCenter(extent);\n    const baseParams = {\n      'OPERATION': this.useOverlay_\n        ? 'GETDYNAMICMAPOVERLAYIMAGE'\n        : 'GETMAPIMAGE',\n      'VERSION': '2.0.0',\n      'LOCALE': 'en',\n      'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n      'CLIP': '1',\n      'SETDISPLAYDPI': this.displayDpi_,\n      'SETDISPLAYWIDTH': Math.round(size[0]),\n      'SETDISPLAYHEIGHT': Math.round(size[1]),\n      'SETVIEWSCALE': scale,\n      'SETVIEWCENTERX': center[0],\n      'SETVIEWCENTERY': center[1],\n    };\n    assign(baseParams, params);\n    return appendParams(baseUrl, baseParams);\n  }\n\n  /**\n   * Set the image load function of the MapGuide source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n}\n\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  const mcsW = getWidth(extent);\n  const mcsH = getHeight(extent);\n  const devW = size[0];\n  const devH = size[1];\n  const mpp = 0.0254 / dpi;\n  if (devH * mcsW > devW * mcsH) {\n    return (mcsW * metersPerUnit) / (devW * mpp); // width limited\n  } else {\n    return (mcsH * metersPerUnit) / (devH * mpp); // height limited\n  }\n}\n\nexport default ImageMapGuide;\n","import ImageLayer from '../src/ol/layer/Image.js';\nimport ImageMapGuide from '../src/ol/source/ImageMapGuide.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\n\nconst mdf = 'Library://Samples/Sheboygan/Maps/Sheboygan.MapDefinition';\nconst agentUrl = 'http://138.197.230.93:8008/mapguide/mapagent/mapagent.fcgi?';\nconst bounds = [\n  -87.865114442365922,\n  43.665065564837931,\n  -87.595394059497067,\n  43.823852564430069,\n];\nconst map = new Map({\n  layers: [\n    new ImageLayer({\n      extent: bounds,\n      source: new ImageMapGuide({\n        projection: 'EPSG:4326',\n        url: agentUrl,\n        useOverlay: false,\n        metersPerUnit: 111319.4908, //value returned from mapguide\n        params: {\n          MAPDEFINITION: mdf,\n          FORMAT: 'PNG',\n          VERSION: '3.0.0',\n          USERNAME: 'OLGuest',\n          PASSWORD: 'olguest',\n        },\n        ratio: 2,\n      }),\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [-87.7302542509315, 43.744459064634],\n    projection: 'EPSG:4326',\n    zoom: 12,\n  }),\n});\n"],"sourceRoot":""}